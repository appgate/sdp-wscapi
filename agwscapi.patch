diff --git a/Samples/WebSecurityCenter/cpp/WscApiSample.cpp b/Samples/WebSecurityCenter/cpp/WscApiSample.cpp
index 5607782..e5772ce 100644
--- a/Samples/WebSecurityCenter/cpp/WscApiSample.cpp
+++ b/Samples/WebSecurityCenter/cpp/WscApiSample.cpp
@@ -18,8 +18,27 @@
 #include <wscapi.h>
 #include <iwscapi.h>
 
+#include <string>
 
-HRESULT 
+static std::wstring escape(BSTR bs)
+{
+    std::wstring s(bs, SysStringLen(bs));
+    std::wstring ns = L"";
+    for (wchar_t& c : s) {
+        if (c == '\\') {
+            ns += L"\\\\";
+        }
+        else if (c == '\"') {
+            ns += L"\\\"";
+        }
+        else {
+            ns += c;
+        }
+    }
+    return ns;
+}
+
+static HRESULT
 GetSecurityProducts(
     _In_ WSC_SECURITY_PROVIDER provider
     )
@@ -32,6 +51,8 @@ GetSecurityProducts(
     WSC_SECURITY_PRODUCT_STATE      ProductState;
     WSC_SECURITY_SIGNATURE_STATUS   ProductStatus;
 
+    std::wstring json = L"";
+
     if (provider != WSC_SECURITY_PROVIDER_FIREWALL && 
         provider != WSC_SECURITY_PROVIDER_ANTIVIRUS && 
         provider != WSC_SECURITY_PROVIDER_ANTISPYWARE)
@@ -52,7 +73,7 @@ GetSecurityProducts(
             reinterpret_cast<LPVOID*> (&PtrProductList));
     if(FAILED(hr))
     {
-        wprintf(L"CoCreateInstance returned error = 0x%d \n", hr);
+        fwprintf(stderr, L"CoCreateInstance returned error = 0x%d \n", hr);
         goto exit;
     }
 
@@ -63,7 +84,7 @@ GetSecurityProducts(
     hr = PtrProductList->Initialize(provider);
     if(FAILED(hr))
     {
-        wprintf(L"Initialize failed with error: 0x%d\n", hr);
+        fwprintf(stderr, L"Initialize failed with error: 0x%d\n", hr);
         goto exit;
     }
 
@@ -73,35 +94,40 @@ GetSecurityProducts(
     hr = PtrProductList->get_Count(&ProductCount);
     if (FAILED(hr))
     {
-        wprintf(L"get_Count failed with error: 0x%d\n", hr);
+        fwprintf(stderr, L"get_Count failed with error: 0x%d\n", hr);
         goto exit;
     }
 
     if (provider == WSC_SECURITY_PROVIDER_FIREWALL)
     {
-        wprintf(L"\n\nFirewall Products:\n");
+        json += L"\"Firewall\":";
     }
     else if (provider == WSC_SECURITY_PROVIDER_ANTIVIRUS)
     {
-        wprintf(L"\n\nAntivirus Products:\n");
+        json += L"\"Antivirus\":";
     }
     else
     {
-        wprintf(L"\n\nAntispyware Products:\n");
+        json += L"\"Antispyware\":";
     }
 
     //
     // Loop over each product, querying the specific attributes.
     //
+    json += L"[";
+    bool first = true;
     for (LONG i = 0; i < ProductCount; i++)
     {
+        if (!first) json += L",";
+        json += L"{";
+        first = false;
         //
         // Get the next security product
         //
         hr = PtrProductList->get_Item(i, &PtrProduct);
         if(FAILED(hr))
         {
-            wprintf(L"get_Item failed with error: 0x%d\n", hr);
+            fwprintf(stderr, L"get_Item failed with error: 0x%d\n", hr);
             goto exit;
         }
 
@@ -111,10 +137,13 @@ GetSecurityProducts(
         hr = PtrProduct->get_ProductName(&PtrVal);
         if (FAILED(hr))
         {
-            wprintf(L"get_ProductName failed with error: 0x%d\n", hr);
+            fwprintf(stderr, L"get_ProductName failed with error: 0x%d\n", hr);
             goto exit;
         }
-        wprintf(L"\nProduct name: %s\n", PtrVal);
+
+        json += L"\"product_name\":\"";
+        json += escape(PtrVal);
+        json += L"\"";
         // Caller is responsible for freeing the string
         SysFreeString(PtrVal);
         PtrVal = nullptr;
@@ -125,7 +154,7 @@ GetSecurityProducts(
         hr = PtrProduct->get_ProductState(&ProductState);
         if (FAILED(hr))
         {
-            wprintf(L"get_ProductState failed with error: 0x%d\n", hr);
+            fwprintf(stderr, L"get_ProductState failed with error: 0x%d\n", hr);
             goto exit;
         }
 
@@ -146,7 +175,9 @@ GetSecurityProducts(
         {
             pszState = L"Expired";
         }
-        wprintf(L"Product state: %s\n", pszState);
+        json += L",\"product_state\":\"";
+        json += pszState;
+        json += L"\"";
 
         //
         // Get the signature status (not applicable to firewall products)
@@ -156,12 +187,14 @@ GetSecurityProducts(
             hr = PtrProduct->get_SignatureStatus(&ProductStatus);
             if (FAILED(hr))
             {
-                wprintf(L"get_SignatureStatus failed with error: 0x%d\n", hr);
+                fwprintf(stderr, L"get_SignatureStatus failed with error: 0x%d\n", hr);
                 goto exit;
             }
             LPWSTR pszStatus = (ProductStatus == WSC_SECURITY_PRODUCT_UP_TO_DATE) ? 
                                     L"Up-to-date" : L"Out-of-date";
-            wprintf(L"Product status: %s\n", pszStatus);
+            json += L",\"product_status\":\"";
+            json += pszStatus;
+            json += L"\"";
         }
 
         //
@@ -170,10 +203,14 @@ GetSecurityProducts(
         hr = PtrProduct->get_RemediationPath(&PtrVal);
         if (FAILED(hr))
         {
-            wprintf(L"get_RemediationPath failed with error: 0x%d\n", hr);
+            fwprintf(stderr, L"get_RemediationPath failed with error: 0x%d\n", hr);
             goto exit;
         }
-        wprintf(L"Product remediation path: %s\n", PtrVal);
+        json += L",\"remediation_path\":\"";
+
+        std::wstring rp(PtrVal, SysStringLen(PtrVal));
+        json += escape(PtrVal);
+        json += L"\"";
         // Caller is responsible for freeing the string
         SysFreeString(PtrVal);
         PtrVal = nullptr;
@@ -188,10 +225,12 @@ GetSecurityProducts(
             hr = PtrProduct->get_ProductStateTimestamp(&PtrVal);
             if (FAILED(hr))
             {
-                wprintf(L"get_ProductStateTimestamp failed with error: 0x%d\n", hr);
+                fwprintf(stderr, L"get_ProductStateTimestamp failed with error: 0x%d\n", hr);
                 goto exit;
             }
-            wprintf(L"Product state timestamp: %s\n", PtrVal);
+            json += L",\"product_state_timestamp\":\"";
+            json += escape(PtrVal);
+            json += L"\"";
             // Caller is responsible for freeing the string
             SysFreeString(PtrVal);
             PtrVal = nullptr;
@@ -199,10 +238,13 @@ GetSecurityProducts(
 
         PtrProduct->Release();
         PtrProduct = nullptr;
+
+        json += L"}";
     }
+    json += L"]";
+    wprintf(L"%ws", json.c_str());
 
 exit:
-
     if (nullptr != PtrVal)
     {
         SysFreeString(PtrVal);
@@ -218,12 +260,14 @@ exit:
     return hr;
 }
 
-void PrintUsage()
+static void PrintUsage()
 {
-    wprintf(L"Usage: WscApiSample.exe [-av | -as | -fw]\n");
-    wprintf(L"   av: Query Antivirus programs\n");
-    wprintf(L"   as: Query Antispyware programs\n");
-    wprintf(L"   fw: Query Firewall programs\n\n");
+    fwprintf(stderr, L"Usage: agwscapi.exe [-av | -as | -fw]\n");
+    fwprintf(stderr, L"   av: Query Antivirus programs\n");
+    fwprintf(stderr, L"   as: Query Antispyware programs\n");
+    fwprintf(stderr, L"   fw: Query Firewall programs\n\n");
+
+    fprintf(stderr, "Built: " "" __DATE__ "" " " "" __TIME__ "" "\n");
 }
 
 int 
@@ -271,13 +315,20 @@ wmain(
         }
     }
 
-    CoInitializeEx(0, COINIT_APARTMENTTHREADED );
+    if (CoInitializeEx(0, COINIT_APARTMENTTHREADED) != S_OK)
+    {
+        fwprintf(stderr, L"CoInitializeEx failed\n");
+    }
 
+    wprintf(L"{");
+    bool first = true;
     for (int i = 0; i < iProviderCount; i++)
     {
         //
         // Query security products of the specified type (AV, AS, or FW)
         //
+        if (!first) wprintf(L",");
+        first = false;
         hr = GetSecurityProducts(providers[i]);
         if (FAILED(hr))
         {
@@ -285,6 +336,7 @@ wmain(
             break;
         }
     }
+    wprintf(L"}");
 
     CoUninitialize();
     return ret;
diff --git a/Samples/WebSecurityCenter/cpp/WscApiSample.vcxproj b/Samples/WebSecurityCenter/cpp/WscApiSample.vcxproj
index 29b82c0..35d8508 100644
--- a/Samples/WebSecurityCenter/cpp/WscApiSample.vcxproj
+++ b/Samples/WebSecurityCenter/cpp/WscApiSample.vcxproj
@@ -17,18 +17,19 @@
     <ProjectGuid>{E3255DBC-EBED-426E-85BC-AFB641F41346}</ProjectGuid>
     <Keyword>Win32Proj</Keyword>
     <RootNamespace>WscApiSample</RootNamespace>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
-    <PlatformToolset>v110</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
-    <PlatformToolset>v110</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
     <WholeProgramOptimization>true</WholeProgramOptimization>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
@@ -47,6 +48,7 @@
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
     <LinkIncremental>false</LinkIncremental>
+    <TargetName>agwscapi</TargetName>
   </PropertyGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
     <ClCompile>
@@ -67,10 +69,12 @@
       <WarningLevel>Level3</WarningLevel>
       <PrecompiledHeader>
       </PrecompiledHeader>
-      <Optimization>MaxSpeed</Optimization>
+      <Optimization>MinSpace</Optimization>
       <FunctionLevelLinking>true</FunctionLevelLinking>
       <IntrinsicFunctions>true</IntrinsicFunctions>
       <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
+      <ExceptionHandling>false</ExceptionHandling>
     </ClCompile>
     <Link>
       <SubSystem>Console</SubSystem>
